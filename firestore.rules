/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset implements a role-based access control system.
 * Agents can only manage their own profile, while missions are publicly readable but only modifiable by agents.
 *
 * @Data Structure
 * - /agents/{agentId}: Stores agent profile information. Accessible only to the agent themselves.
 * - /missions/{missionId}: Stores mission details. Publicly readable, writable only by agents.
 *
 * @Key Security Decisions
 * - Agents can only manage their own agent profile.
 * - Missions are publicly readable, but agent-only writable.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual agent documents.
     * @path /agents/{agentId}
     * @allow (get, update, delete) if the request is made by the agent with matching ID.
     * @allow (create) if the request is made by the agent creating their own profile.
     * @deny (get, list) if the request is not made by the agent.
     * @deny (create, update, delete) if the request is not made by the agent or if they are trying to modify another agent's profile.
     * @principle Enforces document ownership for agents; each agent can only access their own data.
     */
    match /agents/{agentId} {
      allow get: if isSignedIn() && isOwner(agentId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isExistingOwner(agentId);
      allow delete: if isSignedIn() && isExistingOwner(agentId);
    }

    /**
     * @description Controls access to mission documents.
     * @path /missions/{missionId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) only to authenticated agents.
     * @deny (create, update, delete) if the request is not made by an authenticated agent.
     * @principle Allows public read access to missions, but restricts modifications to authenticated agents.
     */
    match /missions/{missionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // --- Helper functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the request is made by the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the request is made by the owner of an existing document.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}