/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access controls.
 * Read access is generally open where appropriate, but write access is always restricted
 * to prevent unauthorized data modification. All potentially private data is secured behind authentication checks.
 *
 * Data Structure:
 * - /agents/{agentId}: Stores individual agent information.
 * - /missions/{missionId}: Stores individual mission details.
 * - /gatherings/{gatheringId}: Stores individual gathering details.
 * - /settings/app: Stores application settings (e.g., logo). Only accessible for reading.
 * - /visitors/{visitorId}: Stores visitor information.
 *
 * Key Security Decisions:
 * - Listing of agents, missions and gatherings is allowed for any signed-in user.
 * - App settings can be read by anyone, but cannot be written to.
 * - Listing of visitors is allowed for any signed-in user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to agent documents.
     * @path /agents/{agentId}
     * @allow (get, list) Signed-in user can view all agents.
     * @allow (create, update, delete) Only signed-in users can create, update, or delete agent documents.
     * @deny No unauthenticated access.
     * @principle Requires authentication for all operations.
     */
    match /agents/{agentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to mission documents.
     * @path /missions/{missionId}
     * @allow (get, list) Signed-in user can view all missions.
     * @allow (create, update, delete) Only signed-in users can create, update, or delete mission documents.
     * @deny No unauthenticated access.
     * @principle Requires authentication for all operations.
     */
    match /missions/{missionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to gathering documents.
     * @path /gatherings/{gatheringId}
     * @allow (get, list) Signed-in user can view all gatherings.
     * @allow (create, update, delete) Only signed-in users can create, update, or delete gathering documents.
     * @deny No unauthenticated access.
     * @principle Requires authentication for all operations.
     */
    match /gatherings/{gatheringId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read-only access to application settings.
     * @path /settings/app
     * @allow (get) Any user can retrieve the application settings.
     * @deny (create, update, delete) No one can modify the application settings.
     * @principle Restricts write access to application settings.
     */
    match /settings/app {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to visitor documents.
     * @path /visitors/{visitorId}
     * @allow (get, list) Signed-in user can view all visitors.
     * @allow (create, update, delete) Only signed-in users can create, update, or delete visitor documents.
     * @deny No unauthenticated access.
     * @principle Requires authentication for all operations.
     */
    match /visitors/{visitorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}