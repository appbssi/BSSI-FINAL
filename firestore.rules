/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset provides highly secure, yet flexible, rules suitable for rapid prototyping.
 * It prioritizes clear authorization boundaries, granting access based on simple ownership.
 * It assumes a flexible data model to allow for schema iteration.
 *
 * Data Structure:
 * - `/agents/{agentId}`: Stores agent profiles.
 * - `/missions/{missionId}`: Stores mission details.
 *
 * Key Security Decisions:
 * - Agents and missions are not listable by default except for admins (not yet implemented).
 * - All write operations are explicitly secured with an ownership or existence check.
 *
 * Denormalization for Authorization:
 *   None implemented, but recommended for performance as the project evolves. For example:
 *     - On `Mission`, store `assignedAgentIds` to avoid needing to query agents.
 *
 * Structural Segregation:
 *   Not applicable in this simple model. Consider using separate collections for public vs. private
 *   data as the application grows (e.g., `/missions_public` vs. `/missions_private/{missionId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /agents collection.
     * @path /agents/{agentId}
     * @allow (create) - An agent can create their own profile if the agentId matches their UID.
     * @allow (get) - Any authenticated user can read an agent's profile.
     * @deny (create) - An unauthenticated user cannot create an agent profile.
     * @deny (update, delete) - Only the agent themselves can update or delete their profile.
     * @principle Enforces document ownership for writes, authenticated access for reads.
     */
    match /agents/{agentId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isExistingOwner(agentId);
      allow delete: if isSignedIn() && isExistingOwner(agentId);
    }

    /**
     * @description Controls access to the /missions collection.
     * @path /missions/{missionId}
     * @allow (create) - Any authenticated user can create a mission.
     * @allow (get) - Any authenticated user can read a mission.
     * @deny (update, delete) - Only the user who created the mission can update or delete it.
     * @principle Enforces document ownership for writes, authenticated access for reads.
     */
    match /missions/{missionId} {
      // Read rules
      allow get: if isSignedIn();
      allow list: if false;

      // Write rules
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // --- Helper functions ---
    // Check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if the user is the owner of the document based on the provided userId
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

   // Check if the user is the owner of the document and the document exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}