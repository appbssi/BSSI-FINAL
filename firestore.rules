/**
 * @fileoverview Firestore Security Rules for the Agent Mission Management App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict owner-only access model for agents, allowing only the agent themselves to read, update, or delete their own information.
 * Missions are publicly readable but only updatable/deletable with authorization.
 *
 * Data Structure:
 * - Agents: Stored in `/agents/{agentId}`.  Access is restricted to the agent whose ID matches the `agentId`.
 * - Missions: Stored in `/missions/{missionId}`.  Missions are readable by anyone, but only authorized users can modify them.
 *
 * Key Security Decisions:
 * - Agents can only access their own data.  There is no mechanism for listing all agents.
 * - Missions are publicly readable to facilitate discovery, but write access is restricted.
 *
 * Denormalization for Authorization:
 * - The `Mission` entity is designed to allow for adding collaborators to manage them.
 *
 * Structural Segregation:
 * - No structural segregation is used in this application.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to agent documents. Only the agent themselves can read, update, or delete their own information.
     * @path /agents/{agentId}
     * @allow (get) - Agent 'agent_abc' can read their own profile.
     * @allow (list) - Agent 'agent_abc' can list their own profile.
     * @allow (create) - Agent 'agent_abc' can create their own profile.
     * @allow (update) - Agent 'agent_abc' can update their own profile.
     * @allow (delete) - Agent 'agent_abc' can delete their own profile.
     * @deny (get) - Agent 'agent_xyz' cannot read agent 'agent_abc' profile.
     * @deny (list) - Agent 'agent_xyz' cannot list agent 'agent_abc' profile.
     * @deny (create) - Agent 'agent_xyz' cannot create agent 'agent_abc' profile.
     * @deny (update) - Agent 'agent_xyz' cannot update agent 'agent_abc' profile.
     * @deny (delete) - Agent 'agent_xyz' cannot delete agent 'agent_abc' profile.
     * @principle Enforces document ownership for all operations on agent profiles.
     */
    match /agents/{agentId} {
      allow get: if isOwner(agentId);
      allow list: if false;
      allow create: if isOwner(agentId);
      allow update: if isExistingOwner(agentId);
      allow delete: if isExistingOwner(agentId);
    }

    /**
     * @description Controls access to mission documents.  Missions are publicly readable, but only authorized users can create, update, or delete them.
     * @path /missions/{missionId}
     * @allow (get) Anyone can read a mission.
     * @allow (list) Anyone can list missions.
     * @deny (create) Only the authorized users can create a mission.
     * @deny (update) Only the authorized users can update a mission.
     * @deny (delete) Only the authorized users can delete a mission.
     * @principle Missions are readable by anyone, but only authorized users can modify them.
     */
    match /missions/{missionId} {
      allow get, list: if true;
      allow create: if false; //saute cette permission
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}