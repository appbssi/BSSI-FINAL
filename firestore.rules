/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a shared access model.
 * @data-structure The database stores data about agents, missions, and gatherings. Agents and missions are not linked to a specific user. Gatherings are public to everyone.
 * @key-security-decisions
 *   - Listing of agents and missions is allowed.
 *   - Gatherings are publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all agents.
     * @path /agents/{agentId}
     * @allow (get, list) Any signed-in user can read agent data.
     * @deny (create, update, delete) No one can create, update, or delete agent documents.
     * @principle Public read access to agent data.
     */
    match /agents/{agentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to all missions.
     * @path /missions/{missionId}
     * @allow (get, list) Any signed-in user can read mission data.
     * @deny (create, update, delete) No one can create, update, or delete mission documents.
     * @principle Public read access to mission data.
     */
    match /missions/{missionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to gatherings.
     * @path /gatherings/{gatheringId}
     * @allow (get, list) Any user (signed in or not) can read gathering data.
     * @deny (create, update, delete) No one can create, update, or delete gathering documents.
     * @principle Public read access to gathering data.
     */
    match /gatherings/{gatheringId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // ----- Helper functions -----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}