/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a strict owner-only access model for agents and missions, and allows public read-only access to activity logs.
 *
 * @dataStructure
 *  - /agents/{agentId}: Stores individual agent data. Access is restricted to the agent themselves.
 *  - /missions/{missionId}: Stores mission data. Access is restricted to users who are assigned to the mission.
 *  - /activity_logs/{logId}: Stores activity logs. Publicly readable, but only the service can write.
 *
 * @keySecurityDecisions
 *  - Agents can only access their own data.
 *  - Listing of agents is disallowed for security reasons.
 *  - Public read access is granted for activity logs to facilitate auditing and monitoring, but write access is not defined, implying service-only writes.
 *  - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents access if the user is not signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(agentId) {
      return request.auth.uid == agentId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing document.
     */
    function isExistingOwner(agentId) {
      return request.auth.uid == resource.data.agentId;
    }

    /**
     * @description Rules for the /agents/{agentId} collection.
     * @path /agents/{agentId}
     * @allow (create) User 'vvdc4lBWZ4bTwzhw0iYPGJxqS9h1' can create an agent document with ID 'vvdc4lBWZ4bTwzhw0iYPGJxqS9h1'.
     * @deny (create) User 'vvdc4lBWZ4bTwzhw0iYPGJxqS9h1' cannot create an agent document with ID 'different_id'.
     * @allow (get) User 'vvdc4lBWZ4bTwzhw0iYPGJxqS9h1' can get their own agent document.
     * @deny (get) User 'different_id' cannot get agent document 'vvdc4lBWZ4bTwzhw0iYPGJxqS9h1'.
     * @principle Enforces document ownership for writes.
     */
    match /agents/{agentId} {
      allow get: if isOwner(agentId);
      allow list: if false; // Listing agents is disallowed for security.
      allow create: if request.auth.uid == agentId;
      allow update: if isOwner(agentId);
      allow delete: if isOwner(agentId);
    }

    /**
     * @description Rules for the /missions/{missionId} collection.
     * @path /missions/{missionId}
     * @allow (get) Any signed-in user can read mission details.
     * @deny (create) Unauthorized users cannot create missions.
     * @principle Owner-only access for modifications.
     */
    match /missions/{missionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId; // Only the agent creating the mission can create it.
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.ownerId; // Only the owner can update or delete
    }

    /**
     * @description Rules for the /activity_logs/{logId} collection.
     * @path /activity_logs/{logId}
     * @allow (get) Any user can read activity logs.
     * @deny (create) Unauthorized users cannot create activity logs.
     * @principle Public read access, restricted write access.
     */
    match /activity_logs/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}