/**
 * @description This ruleset enforces a public read, owner-only write model for 'agents' and 'missions' collections.
 * All users can read agent and mission details, but only authenticated users can create, update, or delete them.
 * @dataStructure
 * - /agents/{agentId}: Stores information about individual agents.
 * - /missions/{missionId}: Stores details about individual missions.
 * @keySecurityDecisions
 * - Agents and missions are publicly readable, but write access is restricted to authenticated users.
 * - Schema validation is relaxed to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read agent details, but only authenticated users to create, update, or delete them.
     * @path /agents/{agentId}
     * @allow (get, list) All users can read agent details.
     * @allow (create) Authenticated user can create new agent. The 'email' field must match the user's email.
     * @allow (update) Authenticated user can update existing agent if they are the owner.
     * @allow (delete) Authenticated user can delete existing agent if they are the owner.
     * @deny (create) Non-authenticated user cannot create an agent.
     * @deny (update) Non-authenticated user cannot update an agent.
     * @deny (delete) Non-authenticated user cannot delete an agent.
     * @principle Public read, owner-only write.
     */
    match /agents/{agentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read mission details, but only authenticated users to create, update, or delete them.
     * @path /missions/{missionId}
     * @allow (get, list) All users can read mission details.
     * @allow (create) Authenticated user can create new mission. The 'email' field must match the user's email.
     * @allow (update) Authenticated user can update existing mission if they are the owner.
     * @allow (delete) Authenticated user can delete existing mission if they are the owner.
     * @deny (create) Non-authenticated user cannot create a mission.
     * @deny (update) Non-authenticated user cannot update a mission.
     * @deny (delete) Non-authenticated user cannot delete a mission.
     * @principle Public read, owner-only write.
     */
    match /missions/{missionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}