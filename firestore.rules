/**
 * @file Overview
 * This ruleset enforces a role-based access control model for the 'agents' and 'missions' collections.
 *
 * Data Structure:
 * - /agents/{agentId}: Stores agent information.
 * - /missions/{missionId}: Stores mission details.
 *
 * Key Security Decisions:
 * - Agents: Only users with a 'admin' role can create, update, or delete agents. Read access is public.
 * - Missions: Only users with a 'admin' role can create, update, or delete missions. Read access is public.
 *
 * Access Control Pattern:
 * - Agents: Public Read with Role-Based Writes ('admin' role required).
 * - Missions: Public Read with Role-Based Writes ('admin' role required).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'agents' collection. Only admins can create, update, or delete agents.
     * @path /agents/{agentId}
     * @allow (get, list): Any user can read agent data.
     * @allow (create, update, delete): Only users with the 'admin' role can modify agent data.
     * @deny (create, update, delete): Non-admin users cannot modify agent data.
     * @principle Enforces role-based access control for agent management.
     */
    match /agents/{agentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the 'missions' collection. Only admins can create, update, or delete missions.
     * @path /missions/{missionId}
     * @allow (get, list): Any user can read mission data.
     * @allow (create, update, delete): Only users with the 'admin' role can modify mission data.
     * @deny (create, update, delete): Non-admin users cannot modify mission data.
     * @principle Enforces role-based access control for mission management.
     */
    match /missions/{missionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Helper function to check if the user has the 'admin' role.
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
  }
}