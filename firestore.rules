/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the 'agents' and 'missions' collections.
 *
 * Core Philosophy:
 * The security model allows public read access to both 'agents' and 'missions' collections, but restricts write access to authenticated users.
 * This allows for open listing and viewing of agents and missions while requiring authentication for any modifications.
 *
 * Data Structure:
 * The database consists of two top-level collections: 'agents' and 'missions'.
 *  - /agents/{agentId}: Stores agent profiles.
 *  - /missions/{missionId}: Stores mission details.
 *
 * Key Security Decisions:
 * - Public Read Access: Both 'agents' and 'missions' are readable by anyone.
 * - Authenticated Writes: Only authenticated users can create, update, or delete agents or missions. No role-based access control is implemented.
 * - No User Listing: Listing all users is not permitted.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the agents collection, but requires authentication for writes.
     * @path /agents/{agentId}
     * @allow (get, list) Anyone can read agent data.
     * @allow (create, update, delete) An authenticated user can modify agent data.
     * @deny (create, update, delete) An unauthenticated user cannot modify agent data.
     * @principle Allows open read access while restricting writes to authenticated users.
     */
    match /agents/{agentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to the missions collection, but requires authentication for writes.
     * @path /missions/{missionId}
     * @allow (get, list) Anyone can read mission data.
     * @allow (create, update, delete) An authenticated user can modify mission data.
     * @deny (create, update, delete) An unauthenticated user cannot modify mission data.
     * @principle Allows open read access while restricting writes to authenticated users.
     */
    match /missions/{missionId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}