/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict authorization model.
 * Agents and Missions are accessible to all authenticated users. The Activity Logs are writeable by all authenticated users
 *
 * Data Structure:
 * The database consists of three top-level collections: /agents/{agentId}, /missions/{missionId}, and /activity_logs/{logId}.
 *
 * Key Security Decisions:
 * - All authenticated users can read all Agents.
 * - All authenticated users can read all Missions.
 * - All authenticated users can create activity logs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read agent profiles.
     * @path /agents/{agentId}
     * @allow (get, list) - Any authenticated user can read agent data.
     * @deny (create, update, delete) - No one can create, update, or delete agent data through the client.
     * @principle Public read, no writes.
     */
    match /agents/{agentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to read mission details.
     * @path /missions/{missionId}
     * @allow (get, list) - Any authenticated user can read mission data.
     * @deny (create, update, delete) - No one can create, update, or delete mission data through the client.
     * @principle Public read, no writes.
     */
    match /missions/{missionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create activity logs.
     * @path /activity_logs/{logId}
     * @allow (create) - Any authenticated user can create a log entry.
     * @deny (get, list, update, delete) - No one can get, list, update, or delete log entries through the client.
     */
    match /activity_logs/{logId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }

    // ----- Helper Functions -----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}