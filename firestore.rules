/**
 * @file Overview
 * This ruleset enforces a security model where agents and missions are managed with authorization checks.
 *
 * Data Structure:
 * - /agents/{agentId}: Stores information about agents.
 * - /missions/{missionId}: Stores information about missions.
 *
 * Key Security Decisions:
 * - Agents and missions are NOT owned by specific users.  Anyone authenticated can read and write.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to agent documents.
     * @path /agents/{agentId}
     * @allow (create) Signed-in user can create an agent.
     * @allow (get) Anyone can read agent data.
     * @allow (list) Anyone can list agents.
     * @allow (update) Signed-in user can update an agent.
     * @allow (delete) Signed-in user can delete an agent.
     * @deny (create) Unauthenticated users cannot create agents.
     * @principle Allows any signed-in user to manage agents.
     */
    match /agents/{agentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to mission documents.
     * @path /missions/{missionId}
     * @allow (create) Signed-in user can create a mission.
     * @allow (get) Anyone can read mission data.
     * @allow (list) Anyone can list missions.
     * @allow (update) Signed-in user can update a mission.
     * @allow (delete) Signed-in user can delete a mission.
     * @deny (create) Unauthenticated users cannot create missions.
     * @principle Allows any signed-in user to manage missions.
     */
    match /missions/{missionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}